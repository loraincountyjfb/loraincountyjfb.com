---
import MainLayout from '../layouts/main.astro';
import ContentRenderer from '../components/ContentRenderer.astro';
import { fetchPageBySlug, isPreviewMode } from '../lib/contentFetcher';
import { loadQuery } from '../../lib/load-query';
import type { PageData } from '../lib/types';

// Generate static paths for multi-segment routes
export async function getStaticPaths() {
  const { data: pages } = await loadQuery({
    query: `*[_type == "page" && defined(slug.current) && slug.current match "*/*"]`,
    params: {},
    enabled: true
  });

  return pages.map(({ slug }: { slug: { current: string } }) => {
    return {
      params: {
        path: slug.current,
      },
    };
  });
}

// Get the path from params - in catch-all routes, this is a string
const { path } = Astro.params as { path: string };

// Determine if we're in preview mode
const preview = isPreviewMode(Astro.url.href);

// Fetch the page content using the path as slug
const page = await fetchPageBySlug(path, preview);

// Redirect to 404 if page not found
if (!page || !page.title) {
  return Astro.redirect('/404');
}
---

<MainLayout content={page}>
  <ContentRenderer content={page.content || []} />
</MainLayout>

<script>
  // Fix form action URLs that have "undefined" in them
  document.addEventListener('DOMContentLoaded', () => {
    const forms = document.querySelectorAll('form[action*="undefined"]');
    forms.forEach(form => {
      const formName = form.getAttribute('name');
      if (formName) {
        form.setAttribute('action', `/thank-you-${formName}`);
      }
    });
  });
</script>

<script>
  // Ensure each form's compression logic works independently
  document.addEventListener('DOMContentLoaded', () => {
    // Find all forms that have compression functionality (look for compression-progress element)
    const allForms = document.querySelectorAll('form');
    const formsWithCompression = [];
    
    allForms.forEach(form => {
      // Check if this form has compression elements
      const formContainer = form.closest('.flex.flex-col.p-10') || form.closest('.relative');
      if (formContainer && formContainer.querySelector('[id*="compression-progress"]')) {
        formsWithCompression.push(form);
      }
    });
    
    console.log(`Found ${formsWithCompression.length} forms with compression functionality`);
    
    formsWithCompression.forEach((form, index) => {
      const formName = form.getAttribute('name') || `form-${index}`;
      
      // Find elements within this specific form's container
      const formContainer = form.closest('.flex.flex-col.p-10') || form.closest('.relative') || form.parentElement;
      if (!formContainer) return;
      
      // Re-initialize compression for this specific form
      initializeFormCompression(form, formContainer, formName);
    });
  });

  function initializeFormCompression(form, container, formName) {
    console.log(`Re-initializing compression for ${formName}`);
    
    // Get elements specific to this form
    const fileInput = container.querySelector('input[name="main_photo"]') || 
                     container.querySelector('input[type="file"][accept*="image"]');
    const progressDiv = container.querySelector('[id*="compression-progress"]');
    const progressMessage = container.querySelector('[id*="compression-message"]');
    const progressBar = container.querySelector('[id*="compression-bar"]');
    const resultDiv = container.querySelector('[id*="compression-result"]');
    const statsSpan = container.querySelector('[id*="compression-stats"]');
    const fileSizeError = container.querySelector('[id*="file-size-error"]');
    const compressionError = container.querySelector('[id*="compression-error"]');
    
    // Bill of Sale elements (only for forms that have them)
    const billFileInput = container.querySelector('input[name="bill_of_sale_photo"]');
    const billProgressDiv = container.querySelector('[id*="bill-compression-progress"]');
    const billProgressMessage = container.querySelector('[id*="bill-compression-message"]');
    const billProgressBar = container.querySelector('[id*="bill-compression-bar"]');
    const billResultDiv = container.querySelector('[id*="bill-compression-result"]');
    const billStatsSpan = container.querySelector('[id*="bill-compression-stats"]');
    const billFileSizeError = container.querySelector('[id*="bill-file-size-error"]');
    const billCompressionError = container.querySelector('[id*="bill-compression-error"]');
    
    const submitButton = container.querySelector('[id*="submit-button"]') || 
                        container.querySelector('button[type="submit"]');
    const submitText = container.querySelector('[id*="submit-text"]') || 
                      (submitButton ? submitButton.querySelector('span') : null);
    const submitSpinner = container.querySelector('[id*="submit-spinner"]');

    let compressedFile = null;
    let compressedBillFile = null;

    // Helper functions (these are duplicated from the inline scripts)
    function fileToBase64(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => {
          const result = reader.result;
          if (typeof result === 'string') {
            const base64 = result.split(",")[1];
            resolve(base64);
          } else {
            reject(new Error('Failed to read file as data URL'));
          }
        };
        reader.onerror = reject;
        reader.readAsDataURL(file);
      });
    }

    function base64ToFile(base64, filename, mimeType) {
      const byteCharacters = atob(base64);
      const byteNumbers = new Array(byteCharacters.length);
      for (let i = 0; i < byteCharacters.length; i++) {
        byteNumbers[i] = byteCharacters.charCodeAt(i);
      }
      const byteArray = new Uint8Array(byteNumbers);
      const blob = new Blob([byteArray], { type: mimeType });
      return new File([blob], filename, { type: mimeType });
    }

    async function compressImage(file, onProgress) {
      try {
        if (!file.type.startsWith("image/")) {
          throw new Error("File must be an image");
        }

        const maxSize = 5 * 1024 * 1024; // 5MB
        if (file.size > maxSize) {
          throw new Error("Image too large. Maximum size is 5MB.");
        }

        onProgress?.({ stage: "reading", message: "Reading image file..." });
        const base64Data = await fileToBase64(file);

        onProgress?.({ stage: "uploading", message: "Uploading to compression service..." });
        const response = await fetch("/.netlify/functions/compress-image", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            imageData: base64Data,
            filename: file.name,
            mimeType: file.type,
          }),
        });

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
        }

        onProgress?.({ stage: "compressing", message: "Compressing image..." });
        const result = await response.json();

        if (!result.success) {
          throw new Error(result.error || "Compression failed");
        }

        onProgress?.({
          stage: "complete",
          message: `Compression complete! Saved ${result.compressionRatio}%`,
        });

        return {
          success: true,
          compressedImage: result.compressedImage,
          originalSize: result.originalSize,
          compressedSize: result.compressedSize,
          compressionRatio: result.compressionRatio,
          filename: result.filename,
          mimeType: result.mimeType,
        };
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : "Unknown error occurred";
        onProgress?.({ stage: "error", message: errorMessage });
        return { success: false, error: errorMessage };
      }
    }

    function createCompressedFile(result) {
      if (!result.success || !result.compressedImage || !result.filename || !result.mimeType) {
        return null;
      }
      return base64ToFile(result.compressedImage, result.filename, result.mimeType);
    }

    function formatFileSize(bytes) {
      if (bytes === 0) return "0 Bytes";
      const k = 1024;
      const sizes = ["Bytes", "KB", "MB", "GB"];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
    }

    function setSubmitButtonState(isCompressing) {
      if (!submitButton || !submitText || !submitSpinner) return;

      if (isCompressing) {
        submitButton.disabled = true;
        submitText.textContent = "COMPRESSING IMAGE...";
        submitSpinner?.classList.remove("hidden");
      } else {
        submitButton.disabled = false;
        submitText.textContent = "SUBMIT";
        submitSpinner?.classList.add("hidden");
      }
    }

    function updateProgress(progress, isBillOfSale = false) {
      const currentProgressMessage = isBillOfSale ? billProgressMessage : progressMessage;
      const currentProgressBar = isBillOfSale ? billProgressBar : progressBar;
      
      if (!currentProgressMessage || !currentProgressBar) return;

      currentProgressMessage.textContent = progress.message;
      const progressPercentages = {
        reading: 25,
        uploading: 50,
        compressing: 75,
        complete: 100,
        error: 0,
      };
      const percentage = progressPercentages[progress.stage] || 0;
      currentProgressBar.style.width = `${percentage}%`;

      const isCompressing = progress.stage !== "complete" && progress.stage !== "error";
      setSubmitButtonState(isCompressing);
    }

    async function handleFileCompression(input, isBillOfSale = false) {
      const file = input.files?.[0];
      
      const currentProgressDiv = isBillOfSale ? billProgressDiv : progressDiv;
      const currentResultDiv = isBillOfSale ? billResultDiv : resultDiv;
      const currentStatsSpan = isBillOfSale ? billStatsSpan : statsSpan;
      const currentFileSizeError = isBillOfSale ? billFileSizeError : fileSizeError;
      const currentCompressionError = isBillOfSale ? billCompressionError : compressionError;

      // Hide messages
      currentProgressDiv?.classList.add("hidden");
      currentResultDiv?.classList.add("hidden");
      currentFileSizeError?.classList.add("hidden");
      currentCompressionError?.classList.add("hidden");

      if (isBillOfSale) {
        compressedBillFile = null;
      } else {
        compressedFile = null;
      }

      if (!file) {
        setSubmitButtonState(false);
        return;
      }

      console.log(`${formName} - ${isBillOfSale ? 'Bill' : 'Main'} file selected:`, file.name);
      setSubmitButtonState(true);

      const maxSize = 5 * 1024 * 1024; // 5MB
      if (file.size > maxSize) {
        currentFileSizeError?.classList.remove("hidden");
        input.value = "";
        setSubmitButtonState(false);
        return;
      }

      currentProgressDiv?.classList.remove("hidden");

      try {
        const result = await compressImage(file, (progress) => updateProgress(progress, isBillOfSale));

        if (result.success) {
          const compressed = createCompressedFile(result);
          
          if (isBillOfSale) {
            compressedBillFile = compressed;
          } else {
            compressedFile = compressed;
          }

          if (compressed && currentStatsSpan) {
            const originalSize = formatFileSize(result.originalSize || 0);
            const compressedSize = formatFileSize(result.compressedSize || 0);
            const ratio = result.compressionRatio || 0;
            currentStatsSpan.textContent = `Reduced from ${originalSize} to ${compressedSize} (${ratio}% savings)`;
            currentProgressDiv?.classList.add("hidden");
            currentResultDiv?.classList.remove("hidden");
            setSubmitButtonState(false);
          }
        } else {
          throw new Error(result.error || "Compression failed");
        }
      } catch (error) {
        if (currentCompressionError) {
          currentCompressionError.textContent = error instanceof Error ? error.message : "Failed to compress image";
          currentCompressionError.classList.remove("hidden");
        }
        currentProgressDiv?.classList.add("hidden");
        
        if (isBillOfSale) {
          compressedBillFile = file;
        } else {
          compressedFile = file;
        }
        setSubmitButtonState(false);
      }
    }

    // Remove any existing event listeners and add new ones
    if (fileInput) {
      const newFileInput = fileInput.cloneNode(true);
      fileInput.parentNode.replaceChild(newFileInput, fileInput);
      newFileInput.addEventListener("change", async function(e) {
        await handleFileCompression(e.target, false);
      });
    }

    if (billFileInput) {
      const newBillInput = billFileInput.cloneNode(true);
      billFileInput.parentNode.replaceChild(newBillInput, billFileInput);
      newBillInput.addEventListener("change", async function(e) {
        await handleFileCompression(e.target, true);
      });
    }

    // Handle form submission
    form.addEventListener("submit", function(e) {
      console.log(`${formName} submission - compressed files:`, { main: compressedFile, bill: compressedBillFile });
      
      if (compressedFile && fileInput) {
        const currentFileInput = container.querySelector('input[name="main_photo"]') || 
                                container.querySelector('input[type="file"][accept*="image"]');
        if (currentFileInput) {
          const dataTransfer = new DataTransfer();
          dataTransfer.items.add(compressedFile);
          currentFileInput.files = dataTransfer.files;
        }
      }

      if (compressedBillFile && billFileInput) {
        const billInput = container.querySelector('input[name="bill_of_sale_photo"]');
        if (billInput) {
          const billDataTransfer = new DataTransfer();
          billDataTransfer.items.add(compressedBillFile);
          billInput.files = billDataTransfer.files;
        }
      }
    });

    setSubmitButtonState(false);
  }
</script> 