---
import '../styles/global.css';
import Navigation from '../components/Navigation.astro';
import Footer from '../components/Footer.astro';
import { VisualEditing } from "@sanity/astro/visual-editing";
import '@fontsource/source-serif-4';
import '@fontsource/source-serif-4/700.css';
import { ViewTransitions } from 'astro:transitions';

// enable env reading
const { content } = Astro.props;

const visualEditingEnabled =  import.meta.env.PUBLIC_SANITY_VISUAL_EDITOR_ENABLED === "true";

---

<html lang="en">
	<head>
		<script>
			// Function to append preview parameter to URLs

			const urlParams = new URLSearchParams(window.location.search)
			const links = document.querySelectorAll('a')
			let visualEditingEnabled = false;
			if (urlParams.has('preview')) {
				visualEditingEnabled = true;
				links.forEach((link) => {
					const url = new URL(link.href)
					url.searchParams.set('preview', 'true')
					link.href = url.toString()
				})
			}
		</script>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<title>{content.title}</title>
		<ViewTransitions />
	</head>
	<body>
		<Navigation />
		<slot />
		<Footer />
		<VisualEditing enabled={visualEditingEnabled} zIndex={1000} />
		
		<script is:inline>
			// Initialize intersection observer for animations
			function setupObserver() {
				// Select all elements to animate
				const animElements = document.querySelectorAll('.animate-on-scroll');
				
				const observer = new IntersectionObserver((entries) => {
					entries.forEach(entry => {
						if (entry.isIntersecting) {
							entry.target.classList.add('animate');
							// Optional: stop observing once animated
							observer.unobserve(entry.target);
						}
					});
				}, { threshold: 0.15 });
				
				animElements.forEach(el => observer.observe(el));
			}

			// Function to initialize observers and load polyfill if needed
			function initializeObservers() {
				if (!window.IntersectionObserver) {
					// Load polyfill if needed
					const script = document.createElement('script');
					script.src = 'https://cdn.jsdelivr.net/npm/intersection-observer@0.12.2/intersection-observer.min.js';
					document.head.appendChild(script);
					script.onload = setupObserver;
				} else {
					setupObserver();
				}
			}

			// Initialize on page load
			document.addEventListener('DOMContentLoaded', initializeObservers);
			
			// Re-initialize after view transitions
			document.addEventListener('astro:page-load', initializeObservers);
		</script>
	</body>
</html>
