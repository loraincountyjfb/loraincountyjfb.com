<div class="max-w-4xl mx-auto bg-primary py-12 px-4 sm:px-6 lg:px-8 rounded-2xl" transition:animate="fade" id="pig-form">
  <div class="mx-auto">
    <div class="text-white mb-8">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
                <h2 class="text-6xl font-bold mb-4 text-white font-poppins animate-on-scroll slide-up">Pig Form</h2>
                
            </div>
        </div>
    </div>

    <form 
      name="pig-form" 
      method="POST" 
      data-netlify="true"
      netlify-honeypot="bot-field"
      class="space-y-6 animate-on-scroll fade-in delay-200"
      action="/thank-you-pig-form"
      enctype="multipart/form-data"
    >
      <input type="hidden" name="form-name" value="pig-form" />
      <input type="hidden" name="page-url" id="page-url" />
      <input type="hidden" name="referrer" id="referrer" />
      
      {/* Honeypot field */}
      <p class="hidden">
        <label>
          Don't fill this out if you're human: <input name="bot-field" />
        </label>
      </p>

      <div class="animate-on-scroll slide-up delay-100">
        <div>
          <input 
            type="text" 
            name="exhibitor_name" 
            id="exhibitor_name" 
            placeholder="Exhibitor name" 
            required
            class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50"
          />
        </div>
       
      </div>

      <div class="animate-on-scroll slide-up delay-200">
        <div>
            <input 
              type="text" 
              name="club_name" 
              id="club_name" 
              placeholder="Club name" 
              required
              class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50"
            />
          </div>
      </div>

      <div class="animate-on-scroll slide-up delay-300">
        <div>
          <input 
            type="tel" 
            name="contact_number" 
            id="contact_number" 
            placeholder="Contact number" 
            required
            class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50"
          />
        </div>
      </div>

      <div class="animate-on-scroll slide-up delay-400">
        <input 
          type="text" 
          name="eid_tag_number" 
          id="eid_tag_number" 
          required
          placeholder="EID tag number"
          class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50"
        />
      </div>

      <div class="animate-on-scroll slide-up delay-500">
        <input 
          type="text" 
          name="jfb_or_farm_eid_tag_used" 
          id="jfb_or_farm_eid_tag_used" 
          required
          placeholder="JFB or Farm EID tag used"
          class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50"
        />
      </div>

      <div class="animate-on-scroll slide-up delay-500">
        <input 
          type="text" 
          name="breed_of_pig" 
          id="breed_of_pig" 
          required
          placeholder="Breed of pig"
          class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50"
        />
      </div>

      <div class="animate-on-scroll slide-up delay-500">
        <label for="sex_of_pig" class="text-white mb-2 block">Sex of pig:</label>
        <select 
          name="sex_of_pig" 
          id="sex_of_pig" 
          required
          class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-white/50"
        >
          <option value="">Select sex</option>
          <option value="Male">Male</option>
          <option value="Female">Female</option>
          <option value="Other">Other</option>
        </select>
      </div>

      <div class="animate-on-scroll slide-up delay-500">
        <label for="pig_photo" class="text-white mb-2 block">Upload photo of pig with tag:</label>
        <input 
          type="file" 
          name="pig_photo" 
          id="pig_photo" 
          accept="image/*"
          class="w-full text-white"
          data-max-size="5"
        />
        
        <!-- Compression progress indicator -->
        <div id="compression-progress" class="mt-2 hidden">
          <div class="flex items-center space-x-2">
            <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
            <span id="compression-message" class="text-white text-sm"></span>
          </div>
          <div class="w-full bg-white/20 rounded-full h-2 mt-2">
            <div id="compression-bar" class="bg-white h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
          </div>
        </div>
        
        <!-- Compression result -->
        <div id="compression-result" class="mt-2 hidden">
          <p class="text-green-400 text-sm">
            âœ“ Image compressed successfully! 
            <span id="compression-stats"></span>
          </p>
        </div>
        
        <!-- Error messages -->
        <p id="file-size-error" class="text-red-500 mt-2 hidden">
          File is too large (max 5MB). Please choose a smaller image.
        </p>
        <p id="compression-error" class="text-red-500 mt-2 hidden"></p>
      </div>

      <div class="animate-on-scroll fade-in delay-500">
        <button 
          type="submit" 
          id="submit-button"
          class="inline-flex justify-center py-3 px-6 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-[#1e3a49] hover:bg-[#152a36] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-[#1e3a49]"
        >
          <span id="submit-text">SUBMIT</span>
          <div id="submit-spinner" class="hidden ml-2">
            <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
          </div>
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  // Image compression utility functions
  /**
   * @param {File} file
   * @returns {Promise<string>}
   */
  function fileToBase64(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const result = reader.result;
        // Remove the data URL prefix (e.g., "data:image/jpeg;base64,")
        const base64 = result.split(',')[1];
        resolve(base64);
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }

  /**
   * @param {string} base64
   * @param {string} filename
   * @param {string} mimeType
   * @returns {File}
   */
  function base64ToFile(base64, filename, mimeType) {
    const byteCharacters = atob(base64);
    const byteNumbers = new Array(byteCharacters.length);
    
    for (let i = 0; i < byteCharacters.length; i++) {
      byteNumbers[i] = byteCharacters.charCodeAt(i);
    }
    
    const byteArray = new Uint8Array(byteNumbers);
    const blob = new Blob([byteArray], { type: mimeType });
    
    return new File([blob], filename, { type: mimeType });
  }

  /**
   * @param {File} file
   * @param {Function} onProgress
   * @returns {Promise<Object>}
   */
  async function compressImage(file, onProgress) {
    try {
      // Validate file type
      if (!file.type.startsWith('image/')) {
        throw new Error('File must be an image');
      }

      // Validate file size (max 5MB for TinyPNG)
      const maxSize = 5 * 1024 * 1024; // 5MB
      if (file.size > maxSize) {
        throw new Error('Image too large. Maximum size is 5MB.');
      }

      onProgress?.({
        stage: 'reading',
        message: 'Reading image file...'
      });

      // Convert file to base64
      const base64Data = await fileToBase64(file);

      onProgress?.({
        stage: 'uploading',
        message: 'Uploading to compression service...'
      });

      // Send to Netlify function for compression
      const response = await fetch('/.netlify/functions/compress-image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          imageData: base64Data,
          filename: file.name,
          mimeType: file.type
        })
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }

      onProgress?.({
        stage: 'compressing',
        message: 'Compressing image...'
      });

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || 'Compression failed');
      }

      onProgress?.({
        stage: 'complete',
        message: `Compression complete! Saved ${result.compressionRatio}%`
      });

      return {
        success: true,
        compressedImage: result.compressedImage,
        originalSize: result.originalSize,
        compressedSize: result.compressedSize,
        compressionRatio: result.compressionRatio,
        filename: result.filename,
        mimeType: result.mimeType
      };

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
      
      onProgress?.({
        stage: 'error',
        message: errorMessage
      });

      return {
        success: false,
        error: errorMessage
      };
    }
  }

  /**
   * @param {Object} result
   * @returns {File|null}
   */
  function createCompressedFile(result) {
    if (!result.success || !result.compressedImage || !result.filename || !result.mimeType) {
      return null;
    }

    return base64ToFile(result.compressedImage, result.filename, result.mimeType);
  }

  /**
   * @param {number} bytes
   * @returns {string}
   */
  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  function getTrafficSource() {
    const referrer = document.referrer;
    const url = new URL(window.location.href);
    let source = 'Direct';
    let searchKeywords = 'Not Available';
    
    // Check if came from Google
    if (referrer && referrer.includes('google')) {
      source = 'Google';
      // Try to get search terms from URL parameters (if available)
      const searchParams = url.searchParams;
      const qParam = searchParams.get('q');
      const utmTerm = searchParams.get('utm_term');
      
      if (qParam) {
        searchKeywords = qParam;
      } else if (utmTerm) {
        searchKeywords = utmTerm;
      }
    } 
    // Check for UTM parameters
    else if (url.searchParams.has('utm_source')) {
      const utmSource = url.searchParams.get('utm_source');
      const utmTerm = url.searchParams.get('utm_term');
      
      source = utmSource || 'Direct';
      if (utmTerm) {
        searchKeywords = utmTerm;
      }
    }
    // If referrer exists but not Google
    else if (referrer) {
      source = new URL(referrer).hostname;
    }

    return { source, searchKeywords };
  }

  // Add hidden fields for traffic source tracking
  const form = document.querySelector('form[name="pig-form"]');
  if (form) {
    const { source, searchKeywords } = getTrafficSource();
    
    // Create and append traffic source field
    const sourceInput = document.createElement('input');
    sourceInput.type = 'hidden';
    sourceInput.name = 'traffic_source';
    sourceInput.value = source;
    form.appendChild(sourceInput);

    // Create and append search keywords field
    const keywordsInput = document.createElement('input');
    keywordsInput.type = 'hidden';
    keywordsInput.name = 'search_keywords';
    keywordsInput.value = searchKeywords;
    form.appendChild(keywordsInput);

    // Set the page URL
    const pageUrlInput = document.getElementById('page-url');
    if (pageUrlInput) {
      pageUrlInput.value = window.location.href;
    }
    
    // Set the full referrer
    const referrerInput = document.getElementById('referrer');
    if (referrerInput) {
      referrerInput.value = document.referrer || 'Direct';
    }
  }

  // Image compression handling
  let compressedFile = null;
  const fileInput = document.getElementById('pig_photo');
  const progressDiv = document.getElementById('compression-progress');
  const progressMessage = document.getElementById('compression-message');
  const progressBar = document.getElementById('compression-bar');
  const resultDiv = document.getElementById('compression-result');
  const statsSpan = document.getElementById('compression-stats');
  const fileSizeError = document.getElementById('file-size-error');
  const compressionError = document.getElementById('compression-error');
  const submitButton = document.getElementById('submit-button');
  const submitText = document.getElementById('submit-text');
  const submitSpinner = document.getElementById('submit-spinner');

  function hideAllMessages() {
    progressDiv?.classList.add('hidden');
    resultDiv?.classList.add('hidden');
    fileSizeError?.classList.add('hidden');
    compressionError?.classList.add('hidden');
  }

  function setSubmitButtonState(isCompressing, hasImage = false) {
    if (!submitButton || !submitText || !submitSpinner) return;

    if (isCompressing) {
      // Disable button during compression
      submitButton.disabled = true;
      submitText.textContent = 'COMPRESSING IMAGE...';
      submitSpinner.classList.remove('hidden');
    } else {
      // Enable button when compression is done or no image
      submitButton.disabled = false;
      submitText.textContent = 'SUBMIT';
      submitSpinner.classList.add('hidden');
    }
  }

  /**
   * @param {Object} progress
   */
  function updateProgress(progress) {
    if (!progressMessage || !progressBar) return;

    progressMessage.textContent = progress.message;
    
    // Update progress bar based on stage
    const progressPercentages = {
      reading: 25,
      uploading: 50,
      compressing: 75,
      complete: 100,
      error: 0
    };
    
    const percentage = progressPercentages[progress.stage] || 0;
    progressBar.style.width = `${percentage}%`;

    // Update submit button state based on compression stage
    const isCompressing = progress.stage !== 'complete' && progress.stage !== 'error';
    setSubmitButtonState(isCompressing, true);
  }

  if (fileInput) {
    fileInput.addEventListener('change', async function(e) {
      const target = e.target;
      if (!target || !target.files) return;
      
      const file = target.files[0];
      
      hideAllMessages();
      compressedFile = null;

      if (!file) {
        // No file selected, enable submit button
        setSubmitButtonState(false, false);
        return;
      }

      // File selected, disable submit button until compression is done
      setSubmitButtonState(true, true);

      // Validate file size (max 5MB for TinyPNG)
      const maxSize = 5 * 1024 * 1024; // 5MB
      if (file.size > maxSize) {
        fileSizeError?.classList.remove('hidden');
        target.value = ''; // Clear the input
        setSubmitButtonState(false, false); // Re-enable submit since no valid file
        return;
      }

      // Show progress indicator
      progressDiv?.classList.remove('hidden');

      try {
        // Compress the image
        const result = await compressImage(file, updateProgress);

        if (result.success) {
          // Create compressed file
          compressedFile = createCompressedFile(result);
          
          if (compressedFile && statsSpan) {
            const originalSize = formatFileSize(result.originalSize || 0);
            const compressedSize = formatFileSize(result.compressedSize || 0);
            const ratio = result.compressionRatio || 0;
            
            statsSpan.textContent = `Reduced from ${originalSize} to ${compressedSize} (${ratio}% savings)`;
            
            // Hide progress and show result
            progressDiv?.classList.add('hidden');
            resultDiv?.classList.remove('hidden');
            
            // Enable submit button - compression complete
            setSubmitButtonState(false, true);
          }
        } else {
          throw new Error(result.error || 'Compression failed');
        }
      } catch (error) {
        console.error('Compression error:', error);
        
        if (compressionError) {
          compressionError.textContent = error instanceof Error ? error.message : 'Failed to compress image';
          compressionError.classList.remove('hidden');
        }
        
        progressDiv?.classList.add('hidden');
        
        // Keep the original file if compression fails
        compressedFile = file;
        
        // Enable submit button - compression failed but we have original file
        setSubmitButtonState(false, true);
      }
    });
  }

  // Handle form submission with compressed image
  if (form) {
    form.addEventListener('submit', function(e) {
      // If we have a compressed file, replace the original file input
      if (compressedFile && fileInput) {
        // Create a new FileList with the compressed file
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(compressedFile);
        fileInput.files = dataTransfer.files;
      }
      
      // Form will submit normally with the compressed file
    });
  }

  // Initialize submit button state
  setSubmitButtonState(false, false);
</script> 