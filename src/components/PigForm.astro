<div class="max-w-4xl mx-auto bg-primary py-12 px-4 sm:px-6 lg:px-8 rounded-2xl" transition:animate="fade" id="pig-form">
  <div class="mx-auto">
    <div class="text-white mb-8">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
                <h2 class="text-6xl font-bold mb-4 text-white font-poppins animate-on-scroll slide-up">Pig Form</h2>
                
            </div>
        </div>
    </div>

    <form 
      name="pig-form" 
      method="POST" 
      data-netlify="true"
      netlify-honeypot="bot-field"
      class="space-y-6 animate-on-scroll fade-in delay-200"
      action="/thank-you-pig-form"
      enctype="multipart/form-data"
    >
      <input type="hidden" name="form-name" value="pig-form" />
      <input type="hidden" name="page-url" id="page-url" />
      <input type="hidden" name="referrer" id="referrer" />
      
      {/* Honeypot field */}
      <p class="hidden">
        <label>
          Don't fill this out if you're human: <input name="bot-field" />
        </label>
      </p>

      <div class="animate-on-scroll slide-up delay-100">
        <div>
          <input 
            type="text" 
            name="exhibitor_name" 
            id="exhibitor_name" 
            placeholder="Exhibitor name" 
            required
            class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50"
          />
        </div>
       
      </div>

      <div class="animate-on-scroll slide-up delay-200">
        <div>
            <input 
              type="text" 
              name="club_name" 
              id="club_name" 
              placeholder="Club name" 
              required
              class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50"
            />
          </div>
      </div>

      <div class="animate-on-scroll slide-up delay-300">
        <div>
          <input 
            type="tel" 
            name="contact_number" 
            id="contact_number" 
            placeholder="Contact number" 
            required
            class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50"
          />
        </div>
      </div>

      <div class="animate-on-scroll slide-up delay-400">
        <input 
          type="text" 
          name="eid_tag_number" 
          id="eid_tag_number" 
          required
          placeholder="EID tag number"
          class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50"
        />
      </div>

      <div class="animate-on-scroll slide-up delay-500">
        <input 
          type="text" 
          name="jfb_or_farm_eid_tag_used" 
          id="jfb_or_farm_eid_tag_used" 
          required
          placeholder="JFB or Farm EID tag used"
          class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50"
        />
      </div>

      <div class="animate-on-scroll slide-up delay-500">
        <input 
          type="text" 
          name="breed_of_pig" 
          id="breed_of_pig" 
          required
          placeholder="Breed of pig"
          class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50"
        />
      </div>

      <div class="animate-on-scroll slide-up delay-500">
        <label for="sex_of_pig" class="text-white mb-2 block">Sex of pig:</label>
        <select 
          name="sex_of_pig" 
          id="sex_of_pig" 
          required
          class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-white/50"
        >
          <option value="">Select sex</option>
          <option value="Male">Male</option>
          <option value="Female">Female</option>
          <option value="Other">Other</option>
        </select>
      </div>

      <div class="animate-on-scroll slide-up delay-500">
        <label for="pig_photo" class="text-white mb-2 block">Upload photo of pig with tag:</label>
        <div id="image-compressor-container">
          <input 
            type="file" 
            name="pig_photo" 
            id="pig_photo" 
            accept="image/*"
            class="w-full text-white file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-white file:text-gray-700 hover:file:bg-gray-100"
          />
          <p class="text-white/80 text-sm mt-2">
            Images larger than 1MB will be automatically compressed using TinyPNG for optimal upload speed.
          </p>
        </div>
        <div id="compression-status" class="mt-3 hidden"></div>
      </div>

      <div class="animate-on-scroll fade-in delay-500">
        <button 
          type="submit" 
          id="submit-button"
          class="inline-flex justify-center py-3 px-6 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-[#1e3a49] hover:bg-[#152a36] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50 disabled:cursor-not-allowed"
        >
          SUBMIT
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  function getTrafficSource() {
    const referrer = document.referrer;
    const url = new URL(window.location.href);
    let source = 'Direct';
    let searchKeywords = 'Not Available';
    
    // Check if came from Google
    if (referrer && referrer.includes('google')) {
      source = 'Google';
      // Try to get search terms from URL parameters (if available)
      const searchParams = url.searchParams;
      const qParam = searchParams.get('q');
      const utmTerm = searchParams.get('utm_term');
      
      if (qParam) {
        searchKeywords = qParam;
      } else if (utmTerm) {
        searchKeywords = utmTerm;
      }
    } 
    // Check for UTM parameters
    else if (url.searchParams.has('utm_source')) {
      const utmSource = url.searchParams.get('utm_source');
      const utmTerm = url.searchParams.get('utm_term');
      
      source = utmSource || 'Direct';
      if (utmTerm) {
        searchKeywords = utmTerm;
      }
    }
    // If referrer exists but not Google
    else if (referrer) {
      source = new URL(referrer).hostname;
    }

    return { source, searchKeywords };
  }

  // Add hidden fields for traffic source tracking
  const form = document.querySelector('form[name="pig-form"]');
  if (form) {
    const { source, searchKeywords } = getTrafficSource();
    
    // Create and append traffic source field
    const sourceInput = document.createElement('input');
    sourceInput.type = 'hidden';
    sourceInput.name = 'traffic_source';
    sourceInput.value = source;
    form.appendChild(sourceInput);

    // Create and append search keywords field
    const keywordsInput = document.createElement('input');
    keywordsInput.type = 'hidden';
    keywordsInput.name = 'search_keywords';
    keywordsInput.value = searchKeywords;
    form.appendChild(keywordsInput);

    // Set the page URL
    const pageUrlInput = document.getElementById('page-url');
    if (pageUrlInput) {
      (pageUrlInput as HTMLInputElement).value = window.location.href;
    }
    
    // Set the full referrer
    const referrerInput = document.getElementById('referrer');
    if (referrerInput) {
      (referrerInput as HTMLInputElement).value = document.referrer || 'Direct';
    }
  }

  // Image compression functionality
  const fileInput = document.getElementById('pig_photo');
  const statusContainer = document.getElementById('compression-status');
  const submitButton = document.getElementById('submit-button');
  let isCompressing = false;

  // Utility functions
  /**
   * @param {number} bytes
   */
  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  /**
   * @param {File} file
   * @param {number} maxSizeKB
   */
  function shouldCompress(file, maxSizeKB = 1024) {
    return file.size > (maxSizeKB * 1024);
  }

  /**
   * @param {File} file
   */
  function fileToBase64(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result);
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }

  /**
   * @param {string} base64
   * @param {string} filename
   * @param {string} mimeType
   */
  function base64ToFile(base64, filename, mimeType = 'image/jpeg') {
    const byteCharacters = atob(base64.split(',')[1]);
    const byteNumbers = new Array(byteCharacters.length);
    
    for (let i = 0; i < byteCharacters.length; i++) {
      byteNumbers[i] = byteCharacters.charCodeAt(i);
    }
    
    const byteArray = new Uint8Array(byteNumbers);
    return new File([byteArray], filename, { type: mimeType });
  }

  /**
   * @param {File} file
   * @param {Function} onProgress
   */
  async function compressImage(file, onProgress) {
    try {
      // Validate file type
      if (!file.type.startsWith('image/')) {
        throw new Error('Please select a valid image file');
      }

      // Check file size (max 500MB as per TinyPNG limits)
      const maxSize = 500 * 1024 * 1024; // 500MB
      if (file.size > maxSize) {
        throw new Error('File size exceeds 500MB limit');
      }

      if (onProgress) {
        onProgress({
          stage: 'reading',
          message: 'Reading image file...',
          progress: 10
        });
      }

      // Convert file to base64
      const base64Data = await fileToBase64(file);

      if (onProgress) {
        onProgress({
          stage: 'uploading',
          message: 'Uploading to compression service...',
          progress: 30
        });
      }

      // Send to Netlify function for compression
      const response = await fetch('/.netlify/functions/compress-image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          imageData: base64Data,
          filename: file.name
        })
      });

      if (onProgress) {
        onProgress({
          stage: 'compressing',
          message: 'Compressing image...',
          progress: 70
        });
      }

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Compression failed');
      }

      if (onProgress) {
        onProgress({
          stage: 'complete',
          message: 'Compression complete!',
          progress: 100
        });
      }

      return result;

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
      
      if (onProgress) {
        onProgress({
          stage: 'error',
          message: errorMessage
        });
      }

      return {
        success: false,
        error: errorMessage
      };
    }
  }

  /**
   * @param {string} type
   * @param {string} message
   * @param {number} progress
   */
  function showStatus(type, message, progress) {
    if (!statusContainer) return;

    statusContainer.classList.remove('hidden');
    
    let bgColor = 'bg-blue-50 border-blue-200';
    let textColor = 'text-blue-900';
    let iconColor = 'text-blue-400';
    
    if (type === 'success') {
      bgColor = 'bg-green-50 border-green-200';
      textColor = 'text-green-900';
      iconColor = 'text-green-400';
    } else if (type === 'error') {
      bgColor = 'bg-red-50 border-red-200';
      textColor = 'text-red-900';
      iconColor = 'text-red-400';
    }

    let progressBar = '';
    if (type === 'progress' && progress !== undefined) {
      progressBar = `
        <div class="w-full bg-blue-200 rounded-full h-2 mt-2">
          <div class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: ${progress}%"></div>
        </div>
      `;
    }

    statusContainer.innerHTML = `
      <div class="p-3 ${bgColor} rounded-lg border">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <svg class="w-5 h-5 ${iconColor}" fill="currentColor" viewBox="0 0 20 20">
              ${type === 'success' 
                ? '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />'
                : type === 'error'
                ? '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />'
                : '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd" />'
              }
            </svg>
          </div>
          <div class="ml-3">
            <p class="text-sm font-medium ${textColor}">${message}</p>
            ${progressBar}
          </div>
        </div>
      </div>
    `;
  }

  function hideStatus() {
    if (statusContainer) {
      statusContainer.classList.add('hidden');
    }
  }

  /**
   * @param {Event} event
   */
  async function handleFileChange(event) {
    const target = event.target;
    const file = target.files?.[0];
    
    if (!file) {
      hideStatus();
      return;
    }

    // Check if compression is needed
    if (!shouldCompress(file, 1024)) {
      hideStatus();
      return;
    }

    isCompressing = true;
    if (submitButton && 'disabled' in submitButton) {
      (submitButton as HTMLButtonElement).disabled = true;
    }

    try {
      /**
       * @param {Object} progress
       */
      const result = await compressImage(file, (progress) => {
        showStatus('progress', progress.message, progress.progress);
      });

      if (result.success) {
        const filename = result.filename || file.name.replace(/\.[^/.]+$/, '_compressed.jpg');
        const compressedFile = base64ToFile(result.compressedImage, filename);
        
        if (compressedFile) {
          // Replace the file in the input
          const dataTransfer = new DataTransfer();
          dataTransfer.items.add(compressedFile);
          target.files = dataTransfer.files;

          showStatus('success', 
            `Image compressed successfully! Reduced by ${result.compressionRatio} (${formatFileSize(result.originalSize || 0)} → ${formatFileSize(result.compressedSize || 0)})`,
            undefined
          );
        } else {
          showStatus('error', 'Failed to create compressed file', undefined);
        }
      } else {
        showStatus('error', result.error || 'Compression failed', undefined);
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
      showStatus('error', `Compression failed: ${errorMessage}`, undefined);
    } finally {
      isCompressing = false;
      if (submitButton && 'disabled' in submitButton) {
        (submitButton as HTMLButtonElement).disabled = false;
      }
    }
  }

  if (fileInput) {
    fileInput.addEventListener('change', handleFileChange);
  }

  // Prevent form submission while compressing
  if (form) {
    form.addEventListener('submit', (event) => {
      if (isCompressing) {
        event.preventDefault();
        showStatus('error', 'Please wait for image compression to complete', undefined);
      }
    });
  }
</script> 