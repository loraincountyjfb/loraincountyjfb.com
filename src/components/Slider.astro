---
import type { SliderContent } from '../lib/types';

interface Props {
  content: SliderContent;
}

const { content } = Astro.props;
const { title, description, slides = [], autoplay = true, interval = 5000 } = content;
---

<!--Dynamic Slider Section-->
<section
  class="box-border flex relative flex-col shrink-0 px-5 py-20 w-screen bg-stone-50 min-h-[100px] ml-[calc(50%_-_50vw)]"
>
  <div
    class="box-border relative grow shrink-0 self-stretch px-5 py-20 mx-auto w-full bg-stone-50 max-w-[1300px] min-h-[100px]"
  >
    <div class="px-5 py-10 min-h-[auto]">
      <header class="p-5 mx-auto my-0 text-center max-w-[1200px]">
        <h1
          class="mb-9 text-6xl font-bold tracking-tighter text-black leading-[65.4px] max-md:text-4xl max-sm:mb-5 max-sm:text-4xl"
        >
          {title}
        </h1>
        {description && (
          <p
            class="mx-auto my-0 text-xl tracking-tight leading-8 text-black max-w-[782px] max-md:text-lg max-sm:px-2.5 max-sm:py-0 max-sm:text-base"
          >
            {description}
          </p>
        )}
      </header>

      {slides.length > 0 && (
        <div
          class="flex relative justify-center items-center mx-auto my-16 max-w-[1400px] max-sm:mx-auto max-sm:my-8"
          role="region"
          aria-label="Image carousel"
        >
          {slides.length > 1 && (
            <button class="carousel-button prev z-20 absolute left-0" aria-label="Previous slide">
              <svg
                width="60"
                height="60"
                viewBox="0 0 79 79"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                class="cursor-pointer transition-all duration-300 hover:scale-110 drop-shadow-lg"
              >
                <circle cx="39.5" cy="39.5" r="39.5" fill="#C9BDF9"></circle>
                <path
                  d="M47.375 26.4949L45.3535 24.5625L28.625 40.5L45.3535 56.4375L47.375 54.515L32.6777 40.5L47.375 26.4949Z"
                  fill="white"
                ></path>
              </svg>
            </button>
          )}

          <div class="carousel-circle relative w-full max-w-[1200px] h-[450px] max-md:h-[350px] max-sm:h-[280px]">
            {slides.map((slide, index) => (
              <div 
                class="carousel-slide absolute transition-all duration-700 ease-in-out"
                data-index={index}
                style="left: 50%; top: 50%; transform: translate(-50%, -50%);"
              >
                <div class="slide-content relative">
                  {slide.image?.url && (
                    <img
                      src={slide.image.url}
                      alt={slide.alt || slide.caption || `Slide ${index + 1}`}
                      class="object-cover w-full h-full rounded-[30px] shadow-lg transition-all duration-300"
                      loading="lazy"
                    />
                  )}
                  {slide.caption && (
                    <div class="image-caption">
                      <p class="text-sm font-medium">{slide.caption}</p>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>

          {slides.length > 1 && (
            <button class="carousel-button next z-20 absolute right-0" aria-label="Next slide">
              <svg
                width="60"
                height="60"
                viewBox="0 0 79 79"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                class="cursor-pointer transition-all duration-300 hover:scale-110 drop-shadow-lg"
              >
                <circle
                  cx="39.5"
                  cy="39.5"
                  r="39.5"
                  transform="matrix(-1 0 0 1 79 0)"
                  fill="#C9BDF9"
                ></circle>
                <path
                  d="M31.625 26.4949L33.6465 24.5625L50.375 40.5L33.6465 56.4375L31.625 54.515L46.3223 40.5L31.625 26.4949Z"
                  fill="white"
                ></path>
              </svg>
            </button>
          )}
        </div>
      )}

      {slides.length > 1 && (
        <div class="flex justify-center mt-8 gap-2">
          {slides.map((_, index) => (
            <button
              class="carousel-indicator w-3 h-3 rounded-full transition-all duration-300 border-2 border-gray-300"
              data-slide={index}
              aria-label={`Go to slide ${index + 1}`}
            ></button>
          ))}
        </div>
      )}
    </div>
  </div>

  <style>
    .carousel-circle {
      perspective: 1000px;
      position: relative;
      overflow: visible;
    }
    
    .carousel-slide {
      will-change: transform;
      backface-visibility: hidden;
    }
    
    .slide-content {
      transition: all 0.3s ease;
    }
    
    .image-caption {
      position: absolute;
      bottom: 4px;
      left: 4px;
      right: 4px;
      background: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 12px;
      border-radius: 12px;
      text-align: center;
      backdrop-filter: blur(4px);
      font-size: 14px;
      font-weight: 500;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .carousel-indicator {
      background-color: rgba(201, 189, 249, 0.3);
      cursor: pointer;
    }
    
    .carousel-indicator.active {
      background-color: #C9BDF9;
      transform: scale(1.2);
    }

    .carousel-button {
      transition: all 0.3s ease;
    }
    
    .carousel-button:hover {
      transform: translateY(-2px);
    }
  </style>

  <script define:vars={{ autoplay, interval, slides }}>
    document.addEventListener("DOMContentLoaded", function () {
      const prevButton = document.querySelector(".carousel-button.prev");
      const nextButton = document.querySelector(".carousel-button.next");
      const indicators = document.querySelectorAll(".carousel-indicator");
      const carouselSlides = document.querySelectorAll(".carousel-slide");
      const carouselCircle = document.querySelector(".carousel-circle");

      let currentIndex = 0;
      const totalSlides = slides.length;
      let autoplayInterval;
      let isTransitioning = false;
      let rotation = 0; // Current rotation of the circle in degrees

      // Exit early if no slides
      if (totalSlides === 0) return;

      // Circle configuration for exactly 3 visible slides
      const angleStep = 360 / totalSlides; // Degrees between each slide
      
      // Fixed positions for the 3 visible slides
      const positions = {
        left: { x: -400, size: 300, opacity: 0.7, zIndex: 5 },
        center: { x: 0, size: 500, opacity: 1, zIndex: 10 },
        right: { x: 400, size: 300, opacity: 0.7, zIndex: 5 }
      };
      
      // Responsive positions
      function getPositions() {
        if (window.innerWidth <= 640) {
          return {
            left: { x: -200, size: 120, opacity: 0.7, zIndex: 5 },
            center: { x: 0, size: 250, opacity: 1, zIndex: 10 },
            right: { x: 200, size: 120, opacity: 0.7, zIndex: 5 }
          };
        } else if (window.innerWidth <= 768) {
          return {
            left: { x: -300, size: 200, opacity: 0.7, zIndex: 5 },
            center: { x: 0, size: 350, opacity: 1, zIndex: 10 },
            right: { x: 300, size: 200, opacity: 0.7, zIndex: 5 }
          };
        }
        return positions;
      }

      function updateSlidePositions() {
        const currentPositions = getPositions();
        
        carouselSlides.forEach((slide, index) => {
          // Calculate which position this slide should be in
          let relativePosition = (index - currentIndex + totalSlides) % totalSlides;
          
          // Determine if this slide should be visible and where
          let position = null;
          let isVisible = false;
          
          if (relativePosition === 0) {
            // This is the current slide (center)
            position = currentPositions.center;
            isVisible = true;
          } else if (relativePosition === 1 || (relativePosition === totalSlides - 1 && totalSlides === 2)) {
            // This is the next slide (right)
            position = currentPositions.right;
            isVisible = totalSlides > 1;
          } else if (relativePosition === totalSlides - 1 || (relativePosition === 1 && totalSlides === 2)) {
            // This is the previous slide (left) 
            position = currentPositions.left;
            isVisible = totalSlides > 2; // Only show left slide if we have more than 2 slides
          }
          
          if (isVisible && position) {
            // Position and style the visible slide
            slide.style.transform = `translate(-50%, -50%) translate(${position.x}px, 0px)`;
            slide.style.opacity = position.opacity;
            slide.style.zIndex = position.zIndex;
            slide.style.visibility = 'visible';
            
            // Add appropriate cursor style
            if (relativePosition === 0) {
              slide.style.cursor = 'default';
            } else {
              slide.style.cursor = 'pointer';
            }
            
            // Size the slide content
            const content = slide.querySelector('.slide-content');
            if (content) {
              content.style.width = `${position.size}px`;
              content.style.height = `${position.size * 0.8}px`;
            }
            
            // Show/hide caption only for center slide
            const caption = slide.querySelector('.image-caption');
            if (caption) {
              caption.style.opacity = relativePosition === 0 ? '1' : '0';
            }
          } else {
            // Hide slides that shouldn't be visible
            slide.style.visibility = 'hidden';
            slide.style.opacity = '0';
            slide.style.cursor = 'default';
          }
        });
        
        // Update indicators
        indicators.forEach((indicator, index) => {
          indicator.classList.toggle('active', index === currentIndex);
        });
      }

      function rotateToNext() {
        if (isTransitioning) return;
        isTransitioning = true;
        
        currentIndex = (currentIndex + 1) % totalSlides;
        updateSlidePositions();
        
        setTimeout(() => {
          isTransitioning = false;
        }, 700);
      }

      function rotateToPrev() {
        if (isTransitioning) return;
        isTransitioning = true;
        
        currentIndex = (currentIndex - 1 + totalSlides) % totalSlides;
        updateSlidePositions();
        
        setTimeout(() => {
          isTransitioning = false;
        }, 700);
      }

      function rotateToSlide(targetIndex) {
        if (isTransitioning || targetIndex === currentIndex) return;
        isTransitioning = true;
        
        currentIndex = targetIndex;
        updateSlidePositions();
        
        setTimeout(() => {
          isTransitioning = false;
        }, 700);
      }

      function startAutoplay() {
        if (autoplay && totalSlides > 1) {
          autoplayInterval = setInterval(rotateToNext, interval);
        }
      }

      function stopAutoplay() {
        if (autoplayInterval) {
          clearInterval(autoplayInterval);
          autoplayInterval = null;
        }
      }

      // Add click listeners to slides
      carouselSlides.forEach((slide, index) => {
        slide.addEventListener('click', () => {
          // Don't do anything if transitioning
          if (isTransitioning) return;
          
          // Calculate which position this slide is currently in
          let relativePosition = (index - currentIndex + totalSlides) % totalSlides;
          
          // Only respond to clicks on visible non-center slides
          if (relativePosition === 1 || (relativePosition === totalSlides - 1 && totalSlides === 2)) {
            // This is the right slide, rotate to next
            stopAutoplay();
            rotateToNext();
            startAutoplay();
          } else if (relativePosition === totalSlides - 1 || (relativePosition === 1 && totalSlides === 2)) {
            // This is the left slide, rotate to previous
            stopAutoplay();
            rotateToPrev();
            startAutoplay();
          }
          // If it's the center slide (relativePosition === 0), do nothing
        });
      });

      // Event Listeners
      if (nextButton && totalSlides > 1) {
        nextButton.addEventListener("click", () => {
          stopAutoplay();
          rotateToNext();
          startAutoplay();
        });
      }

      if (prevButton && totalSlides > 1) {
        prevButton.addEventListener("click", () => {
          stopAutoplay();
          rotateToPrev();
          startAutoplay();
        });
      }

      // Indicator clicks
      indicators.forEach((indicator, index) => {
        indicator.addEventListener("click", () => {
          stopAutoplay();
          rotateToSlide(index);
          startAutoplay();
        });
      });

      // Keyboard navigation
      document.addEventListener("keydown", (e) => {
        if (totalSlides <= 1) return;
        
        if (e.key === "ArrowLeft") {
          stopAutoplay();
          rotateToPrev();
          startAutoplay();
        } else if (e.key === "ArrowRight") {
          stopAutoplay();
          rotateToNext();
          startAutoplay();
        }
      });

      // Touch/swipe support
      let touchStartX = 0;
      let touchEndX = 0;

      carouselCircle.addEventListener("touchstart", (e) => {
        touchStartX = e.changedTouches[0].screenX;
      });

      carouselCircle.addEventListener("touchend", (e) => {
        if (totalSlides <= 1) return;
        
        touchEndX = e.changedTouches[0].screenX;
        const swipeThreshold = 50;
        const diff = touchStartX - touchEndX;
        
        if (Math.abs(diff) > swipeThreshold) {
          stopAutoplay();
          if (diff > 0) {
            rotateToNext();
          } else {
            rotateToPrev();
          }
          startAutoplay();
        }
      });

      // Pause autoplay on hover
      if (carouselCircle) {
        carouselCircle.addEventListener("mouseenter", stopAutoplay);
        carouselCircle.addEventListener("mouseleave", startAutoplay);
      }

      // Handle window resize
      window.addEventListener('resize', () => {
        updateSlidePositions();
      });

      // Initialize
      updateSlidePositions();
      startAutoplay();
    });
  </script>
</section>
