---
interface Props {
  formName: string,
  formAction: string,
}

const { formName, formAction } = Astro.props;

// Determine form type and configuration
const isBBRForm = formName.startsWith('bbr-');
const isAuctionPhotosForm = formName === 'auction-photos';
const isThankYouCardsForm = formName === 'thank-you-cards';
const isRegularAnimalForm = !isBBRForm && !isAuctionPhotosForm && !isThankYouCardsForm;

// BBR-specific logic
const bbrType = isBBRForm ? formName.replace('bbr-', '') : '';
const isGoatOrSheep = bbrType === 'goat' || bbrType === 'sheep';
// Map BBR types to animal types (handle legacy 'beef' -> 'cow' mapping)
const animalType = bbrType === 'beef' ? 'cow' : bbrType;
---
<form
  name={formName}
  method="POST"
  data-netlify="true"
  netlify-honeypot="bot-field"
  class="space-y-6 animate-on-scroll fade-in delay-200"
  action={formAction}
  enctype="multipart/form-data"
>
  <input type="hidden" name="form-name" value={formName} />
  <input type="hidden" name="page-url" id="page-url" />
  <input type="hidden" name="referrer" id="referrer" />

  {/* Honeypot field */}
  <p class="hidden">
    <label>
      Don't fill this out if you're human: <input name="bot-field" />
    </label>
  </p>

  {/* Exhibitor Name - Required for all forms */}
  <div class="animate-on-scroll slide-up delay-100">
    <label for="exhibitor_name" class="text-white mb-2 block h-0 overflow-hidden">Exhibitor name:</label>
    <div>
      <input
        type="text"
        name="exhibitor_name"
        id="exhibitor_name"
        placeholder="Exhibitor's Name (Please Print)"
        required
        class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50 font-bold text-lg"
      />
    </div>
  </div>

  {/* Exhibitor Email - BBR forms only */}
  {isBBRForm && (
    <div class="animate-on-scroll slide-up delay-150">
      <label for="exhibitor_email" class="text-white mb-2 block h-0 overflow-hidden">Exhibitor's Email:</label>
      <div>
        <input
          type="email"
          name="exhibitor_email"
          id="exhibitor_email"
          placeholder="Exhibitor's (or Parent's) E-mail"
          required
          class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50 font-bold text-lg"
        />
      </div>
    </div>
  )}

  {/* Club Name - Required for all forms */}
  <div class="animate-on-scroll slide-up delay-200">
    <label for="club_name" class="text-white mb-2 block h-0 overflow-hidden">Club name:</label>
    <div>
      <input
        type="text"
        name="club_name"
        id="club_name"
        placeholder={isBBRForm ? "Club/Chapter" : "Club name"}
        required
        class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50 font-bold text-lg"
      />
    </div>
  </div>

  {/* Contact Number - BBR forms and Thank You Cards */}
  {(isBBRForm || isThankYouCardsForm) && (
    <div class="animate-on-scroll slide-up delay-300">
      <label for="contact_number" class="text-white mb-2 block h-0 overflow-hidden">Contact number:</label>
      <div>
        <input
          type="tel"
          name="contact_number"
          id="contact_number"
          placeholder={isBBRForm ? "Exhibitor's (or Parent's) Phone Number" : "Contact number"}
          required
          class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50 font-bold text-lg"
        />
      </div>
    </div>
  )}

  {/* Fair Tag Number - Regular animal forms and BBR forms */}
  {(isRegularAnimalForm || isBBRForm) && (
    <div class="animate-on-scroll slide-up delay-400">
      <label for="fair_tag_number" class="text-white mb-2 block h-0 overflow-hidden">Fair Tag Number:</label>
      <input
        type="text"
        name="fair_tag_number"
        id="fair_tag_number"
        required
        placeholder="Fair Tag #"
        class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50 font-bold text-lg"
      />
    </div>
  )}

  {/* EID Tag Number - Auction Photos forms */}
  {isAuctionPhotosForm && (
    <div class="animate-on-scroll slide-up delay-400">
      <label for="eid_tag_number" class="text-white mb-2 block h-0 overflow-hidden">EID Tag Number:</label>
      <input
        type="text"
        name="eid_tag_number"
        id="eid_tag_number"
        required
        placeholder="EID Tag Number"
        class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50 font-bold text-lg"
      />
    </div>
  )}

  {/* Project Type - Auction Photos forms */}
  {isAuctionPhotosForm && (
    <div class="animate-on-scroll slide-up delay-450">
      <label for="project_type" class="text-white mb-2 block font-bold text-lg">Project Type:</label>
      <select
        name="project_type"
        id="project_type"
        required
        class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-white/50 font-bold text-lg"
      >
        <option value="">Select Project Type</option>
        <option value="Beef">Beef</option>
        <option value="Fowl">Fowl</option>
      </select>
    </div>
  )}

  {/* Scrapie Tag - BBR forms for goats & sheep */}
  {isBBRForm && isGoatOrSheep && (
    <div class="animate-on-scroll slide-up delay-450">
      <label for="scrapie_tag" class="text-white mb-2 block h-0 overflow-hidden">Scrapie Tag/Tattoo #:</label>
      <input
        type="text"
        name="scrapie_tag"
        id="scrapie_tag"
        required
        placeholder="Scrapie Tag/Tattoo # (goats & lambs only)"
        class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50 font-bold text-lg"
      />
    </div>
  )}

  {/* Hidden Animal Type - BBR forms only */}
  {isBBRForm && (
    <input
      type="hidden"
      name="animal_type"
      id="animal_type"
      value={animalType}
    />
  )}

  {/* EID Tag Number - Regular animal forms only */}
  {isRegularAnimalForm && (
    <div class="animate-on-scroll slide-up delay-500">
      <label for="eid_tag_number" class="text-white mb-2 block h-0 overflow-hidden">EID tag number:</label>
      <input
        type="text"
        name="eid_tag_number"
        id="eid_tag_number"
        required
        placeholder="EID tag number"
        class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50 font-bold text-lg"
      />
    </div>
  )}

  {/* JFB or Farm EID Tag - Regular animal forms only */}
  {isRegularAnimalForm && (
    <div class="animate-on-scroll slide-up delay-500">
      <label for="jfb_or_farm_eid_tag_used" class="text-white mb-2 block h-0 overflow-hidden">JFB or Farm EID tag used:</label>
      <input
        type="text"
        name="jfb_or_farm_eid_tag_used"
        id="jfb_or_farm_eid_tag_used"
        required
        placeholder="JFB or Farm EID tag used"
        class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50 font-bold text-lg"
      />
    </div>
  )}

  {/* Breed - Regular animal forms and BBR forms */}
  {(isRegularAnimalForm || isBBRForm) && (
    <div class="animate-on-scroll slide-up delay-500">
      <label for="breed" class="text-white mb-2 block h-0 overflow-hidden">Breed:</label>
      <input
        type="text"
        name="breed"
        id="breed"
        required
        placeholder="Breed"
        class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50 font-bold text-lg"
      />
    </div>
  )}

  {/* Sex - Regular animal forms and BBR forms */}
  {(isRegularAnimalForm || isBBRForm) && (
    <div class="animate-on-scroll slide-up delay-500">
      <label for="sex" class="text-white mb-2 block h-0 overflow-hidden">Sex:</label>
      <select
        name="sex"
        id="sex"
        required
        class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-white/50 font-bold text-lg"
      >
        <option value="">Select sex</option>
        <option value="Male">Male</option>
        <option value="Female">Female</option>
        <option value="Other">Other</option>
      </select>
    </div>
  )}

  {/* Breeder Information - BBR forms only */}
  {isBBRForm && (
    <>
      <div class="animate-on-scroll slide-up delay-550">
        <label for="breeder_name" class="text-white mb-2 block h-0 overflow-hidden">Breeder's Name:</label>
        <input
          type="text"
          name="breeder_name"
          id="breeder_name"
          required
          placeholder="Breeder's Name (Please Print)"
          class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50 font-bold text-lg"
        />
      </div>

      <div class="animate-on-scroll slide-up delay-575">
        <label for="breeder_address" class="text-white mb-2 block h-0 overflow-hidden">Breeder's Address:</label>
        <textarea
          name="breeder_address"
          id="breeder_address"
          required
          placeholder="Breeder's Address"
          rows="3"
          class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50 font-bold text-lg"
        ></textarea>
      </div>

      <div class="animate-on-scroll slide-up delay-600">
        <label for="breeder_phone" class="text-white mb-2 block h-0 overflow-hidden">Breeder's Phone:</label>
        <input
          type="tel"
          name="breeder_phone"
          id="breeder_phone"
          required
          placeholder="Breeder's Phone Number"
          class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-md placeholder-white/80 text-white focus:outline-none focus:ring-2 focus:ring-white/50 font-bold text-lg"
        />
      </div>
    </>
  )}

  {/* Main Photo Upload - All forms */}
  <div class="animate-on-scroll slide-up delay-500">
    <label for="main_photo" class="text-white mb-2 block font-bold text-lg">
      {isAuctionPhotosForm && "Upload Auction Photo:"}
      {isThankYouCardsForm && "Upload Thank You Card Image:"}
      {(isRegularAnimalForm || isBBRForm) && `Upload photo of animal${isBBRForm ? ' with tag' : ''}:`}
    </label>
    <input
      type="file"
      name="main_photo"
      id="main_photo"
      accept="image/*"
      class="w-full text-white"
      data-max-size="5"
    />

    <!-- Compression progress indicator -->
    <div id="compression-progress" class="mt-2 hidden">
      <div class="flex items-center space-x-2">
        <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white">
        </div>
        <span id="compression-message" class="text-white text-sm"></span>
      </div>
      <div class="w-full bg-white/20 rounded-full h-2 mt-2">
        <div
          id="compression-bar"
          class="bg-white h-2 rounded-full transition-all duration-300"
          style="width: 0%"
        >
        </div>
      </div>
    </div>

    <!-- Compression result -->
    <div id="compression-result" class="mt-2 hidden">
      <p class="text-green-400 text-sm">
        ✓ Image compressed successfully!
        <span id="compression-stats"></span>
      </p>
    </div>

    <!-- Error messages -->
    <p id="file-size-error" class="text-red-500 mt-2 hidden">
      File is too large (max 5MB). Please choose a smaller image.
    </p>
    <p id="compression-error" class="text-red-500 mt-2 hidden"></p>
  </div>

  {/* Bill of Sale Upload - BBR forms only */}
  {isBBRForm && (
    <div class="animate-on-scroll slide-up delay-525">
      <label for="bill_of_sale_photo" class="text-white mb-2 block font-bold text-lg"
        >Upload Bill of Sale (price not needed):</label
      >
      <input
        type="file"
        name="bill_of_sale_photo"
        id="bill_of_sale_photo"
        accept="image/*"
        class="w-full text-white"
        data-max-size="5"
      />

      <!-- Bill of Sale Compression progress indicator -->
      <div id="bill-compression-progress" class="mt-2 hidden">
        <div class="flex items-center space-x-2">
          <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white">
          </div>
          <span id="bill-compression-message" class="text-white text-sm"></span>
        </div>
        <div class="w-full bg-white/20 rounded-full h-2 mt-2">
          <div
            id="bill-compression-bar"
            class="bg-white h-2 rounded-full transition-all duration-300"
            style="width: 0%"
          >
          </div>
        </div>
      </div>

      <!-- Bill of Sale Compression result -->
      <div id="bill-compression-result" class="mt-2 hidden">
        <p class="text-green-400 text-sm">
          ✓ Bill of Sale compressed successfully!
          <span id="bill-compression-stats"></span>
        </p>
      </div>

      <!-- Bill of Sale Error messages -->
      <p id="bill-file-size-error" class="text-red-500 mt-2 hidden">
        File is too large (max 5MB). Please choose a smaller image.
      </p>
      <p id="bill-compression-error" class="text-red-500 mt-2 hidden"></p>
    </div>
  )}

  {/* Important Notes - BBR forms only */}
  {isBBRForm && (
    <div class="animate-on-scroll slide-up delay-625">
      <div class="bg-white/10 border border-white/30 rounded-md p-4">
        <h3 class="text-white font-bold text-lg mb-4">Important Notes:</h3>
        <ul class="text-white/90 text-sm space-y-2 list-disc list-inside">
          <li>For use with Market Beef, Market Lambs, Market Boer and Dairy Market Goats to be exhibited in the Born, Bred, and Raised type class.</li>
          <li>You must ALSO enter your species' BBR class on your Junior Fair Entry Form.</li>
          <li>Please see Junior Fair book for your species' specific class rules and class number.</li>
          <li>Please fill out one form per animal and attach your bill of sale (price not needed).</li>
          <li><strong>Forms must be submitted by Junior Fair Entry Form deadline.</strong></li>
        </ul>
      </div>
    </div>
  )}

  <div class="animate-on-scroll fade-in delay-500">
    <button
      type="submit"
      id="submit-button"
      class="inline-flex justify-center py-3 px-6 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-none border-white border-2 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-[#1e3a49] font-bold text-lg"
    >
      <span id="submit-text">SUBMIT</span>
      <div id="submit-spinner" class="hidden ml-2">
        <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white">
        </div>
      </div>
    </button>
  </div>
</form>
<script define:vars={{ formName }}>
  /**
   * @param {File} file
   * @returns {Promise<string>}
   */
  function fileToBase64(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const result = reader.result;
        if (typeof result === 'string') {
          // Remove the data URL prefix (e.g., "data:image/jpeg;base64,")
          const base64 = result.split(",")[1];
          resolve(base64);
        } else {
          reject(new Error('Failed to read file as data URL'));
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }

  /**
   * @param {string} base64
   * @param {string} filename
   * @param {string} mimeType
   * @returns {File}
   */
  function base64ToFile(base64, filename, mimeType) {
    const byteCharacters = atob(base64);
    const byteNumbers = new Array(byteCharacters.length);

    for (let i = 0; i < byteCharacters.length; i++) {
      byteNumbers[i] = byteCharacters.charCodeAt(i);
    }

    const byteArray = new Uint8Array(byteNumbers);
    const blob = new Blob([byteArray], { type: mimeType });

    return new File([blob], filename, { type: mimeType });
  }

  /**
   * @param {File} file
   * @param {Function} onProgress
   * @returns {Promise<Object>}
   */
  async function compressImage(file, onProgress) {
    try {
      // Validate file type
      if (!file.type.startsWith("image/")) {
        throw new Error("File must be an image");
      }

      // Validate file size (max 5MB for TinyPNG)
      const maxSize = 5 * 1024 * 1024; // 5MB
      if (file.size > maxSize) {
        throw new Error("Image too large. Maximum size is 5MB.");
      }

      onProgress?.({
        stage: "reading",
        message: "Reading image file...",
      });

      // Convert file to base64
      const base64Data = await fileToBase64(file);

      onProgress?.({
        stage: "uploading",
        message: "Uploading to compression service...",
      });

      // Send to Netlify function for compression
      const response = await fetch("/.netlify/functions/compress-image", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          imageData: base64Data,
          filename: file.name,
          mimeType: file.type,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(
          errorData.error || `HTTP error! status: ${response.status}`
        );
      }

      onProgress?.({
        stage: "compressing",
        message: "Compressing image...",
      });

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || "Compression failed");
      }

      onProgress?.({
        stage: "complete",
        message: `Compression complete! Saved ${result.compressionRatio}%`,
      });

      return {
        success: true,
        compressedImage: result.compressedImage,
        originalSize: result.originalSize,
        compressedSize: result.compressedSize,
        compressionRatio: result.compressionRatio,
        filename: result.filename,
        mimeType: result.mimeType,
      };
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : "Unknown error occurred";

      onProgress?.({
        stage: "error",
        message: errorMessage,
      });

      return {
        success: false,
        error: errorMessage,
      };
    }
  }

  /**
   * @param {Object} result
   * @returns {File|null}
   */
  function createCompressedFile(result) {
    if (
      !result.success ||
      !result.compressedImage ||
      !result.filename ||
      !result.mimeType
    ) {
      return null;
    }

    return base64ToFile(
      result.compressedImage,
      result.filename,
      result.mimeType
    );
  }

  /**
   * @param {number} bytes
   * @returns {string}
   */
  function formatFileSize(bytes) {
    if (bytes === 0) return "0 Bytes";

    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  }

  function getTrafficSource() {
    const referrer = document.referrer;
    const url = new URL(window.location.href);
    let source = "Direct";
    let searchKeywords = "Not Available";

    // Check if came from Google
    if (referrer && referrer.includes("google")) {
      source = "Google";
      // Try to get search terms from URL parameters (if available)
      const searchParams = url.searchParams;
      const qParam = searchParams.get("q");
      const utmTerm = searchParams.get("utm_term");

      if (qParam) {
        searchKeywords = qParam;
      } else if (utmTerm) {
        searchKeywords = utmTerm;
      }
    }
    // Check for UTM parameters
    else if (url.searchParams.has("utm_source")) {
      const utmSource = url.searchParams.get("utm_source");
      const utmTerm = url.searchParams.get("utm_term");

      source = utmSource || "Direct";
      if (utmTerm) {
        searchKeywords = utmTerm;
      }
    }
    // If referrer exists but not Google
    else if (referrer) {
      source = new URL(referrer).hostname;
    }

    return { source, searchKeywords };
  }

  // Initialize compression when DOM is ready
  function initializeCompression() {
    console.log('Initializing image compression...');
    
    // Add hidden fields for traffic source tracking
    const form = document.querySelector(`form[name="${formName}"]`);
    if (form) {
      const { source, searchKeywords } = getTrafficSource();

      // Create and append traffic source field
      const sourceInput = document.createElement("input");
      sourceInput.type = "hidden";
      sourceInput.name = "traffic_source";
      sourceInput.value = source;
      form.appendChild(sourceInput);

      // Create and append search keywords field
      const keywordsInput = document.createElement("input");
      keywordsInput.type = "hidden";
      keywordsInput.name = "search_keywords";
      keywordsInput.value = searchKeywords;
      form.appendChild(keywordsInput);

      // Set the page URL
      const pageUrlInput = document.getElementById("page-url");
      if (pageUrlInput) {
        pageUrlInput.value = window.location.href;
      }

      // Set the full referrer
      const referrerInput = document.getElementById("referrer");
      if (referrerInput) {
        referrerInput.value = document.referrer || "Direct";
      }
    }

    // Image compression handling
    let compressedFile = null;
    let compressedBillFile = null;
    
    // Get all elements with detailed debugging - updated for new field names
    const fileInput = document.getElementById("main_photo");
    const progressDiv = document.getElementById("compression-progress");
    const progressMessage = document.getElementById("compression-message");
    const progressBar = document.getElementById("compression-bar");
    const resultDiv = document.getElementById("compression-result");
    const statsSpan = document.getElementById("compression-stats");
    const fileSizeError = document.getElementById("file-size-error");
    const compressionError = document.getElementById("compression-error");
    
    // Bill of Sale elements
    const billFileInput = document.getElementById("bill_of_sale_photo");
    const billProgressDiv = document.getElementById("bill-compression-progress");
    const billProgressMessage = document.getElementById("bill-compression-message");
    const billProgressBar = document.getElementById("bill-compression-bar");
    const billResultDiv = document.getElementById("bill-compression-result");
    const billStatsSpan = document.getElementById("bill-compression-stats");
    const billFileSizeError = document.getElementById("bill-file-size-error");
    const billCompressionError = document.getElementById("bill-compression-error");
    
    const submitButton = document.getElementById("submit-button");
    const submitText = document.getElementById("submit-text");
    const submitSpinner = document.getElementById("submit-spinner");

    // Debug element detection
    console.log('Element detection:', {
      fileInput: !!fileInput,
      billFileInput: !!billFileInput,
      progressDiv: !!progressDiv,
      billProgressDiv: !!billProgressDiv,
      submitButton: !!submitButton
    });

    function setSubmitButtonState(isCompressing, hasImage = false) {
      if (!submitButton || !submitText || !submitSpinner) {
        console.warn('Submit button elements not found');
        return;
      }

      if (isCompressing) {
        // Disable button during compression
        submitButton.disabled = true;
        submitText.textContent = "COMPRESSING IMAGE...";
        submitSpinner.classList.remove("hidden");
      } else {
        // Enable button when compression is done or no image
        submitButton.disabled = false;
        submitText.textContent = "SUBMIT";
        submitSpinner.classList.add("hidden");
      }
    }

    /**
     * @param {Object} progress
     * @param {boolean} isBillOfSale
     */
    function updateProgress(progress, isBillOfSale = false) {
      const currentProgressMessage = isBillOfSale ? billProgressMessage : progressMessage;
      const currentProgressBar = isBillOfSale ? billProgressBar : progressBar;
      
      if (!currentProgressMessage || !currentProgressBar) {
        console.warn(`Progress elements not found for ${isBillOfSale ? 'bill' : 'main'}`);
        return;
      }

      currentProgressMessage.textContent = progress.message;

      // Update progress bar based on stage
      const progressPercentages = {
        reading: 25,
        uploading: 50,
        compressing: 75,
        complete: 100,
        error: 0,
      };

      const percentage = progressPercentages[progress.stage] || 0;
      currentProgressBar.style.width = `${percentage}%`;

      // Update submit button state based on compression stage
      const isCompressing =
        progress.stage !== "complete" && progress.stage !== "error";
      setSubmitButtonState(isCompressing, true);
    }

    /**
     * Handle file input compression
     * @param {HTMLInputElement} input
     * @param {boolean} isBillOfSale
     */
    async function handleFileCompression(input, isBillOfSale = false) {
      const file = input.files?.[0];
      
      // Get the appropriate UI elements
      const currentProgressDiv = isBillOfSale ? billProgressDiv : progressDiv;
      const currentResultDiv = isBillOfSale ? billResultDiv : resultDiv;
      const currentStatsSpan = isBillOfSale ? billStatsSpan : statsSpan;
      const currentFileSizeError = isBillOfSale ? billFileSizeError : fileSizeError;
      const currentCompressionError = isBillOfSale ? billCompressionError : compressionError;

      // Hide messages for this specific input
      currentProgressDiv?.classList.add("hidden");
      currentResultDiv?.classList.add("hidden");
      currentFileSizeError?.classList.add("hidden");
      currentCompressionError?.classList.add("hidden");

      // Clear the compressed file
      if (isBillOfSale) {
        compressedBillFile = null;
      } else {
        compressedFile = null;
      }

      if (!file) {
        // No file selected, enable submit button
        setSubmitButtonState(false, false);
        return;
      }

      console.log(`${isBillOfSale ? 'Bill of Sale' : 'Main'} file selected:`, file.name, 'Size:', file.size);

      // File selected, disable submit button until compression is done
      setSubmitButtonState(true, true);

      // Validate file size (max 5MB for TinyPNG)
      const maxSize = 5 * 1024 * 1024; // 5MB
      if (file.size > maxSize) {
        console.log('File too large:', file.size);
        currentFileSizeError?.classList.remove("hidden");
        input.value = ""; // Clear the input
        setSubmitButtonState(false, false); // Re-enable submit since no valid file
        return;
      }

      // Show progress indicator
      currentProgressDiv?.classList.remove("hidden");

      try {
        console.log(`Starting ${isBillOfSale ? 'bill of sale' : 'main'} compression...`);
        // Compress the image
        const result = await compressImage(file, (progress) => updateProgress(progress, isBillOfSale));

        if (result.success) {
          console.log(`${isBillOfSale ? 'Bill of Sale' : 'Main'} compression successful:`, result);
          // Create compressed file
          const compressed = createCompressedFile(result);
          
          if (isBillOfSale) {
            compressedBillFile = compressed;
          } else {
            compressedFile = compressed;
          }

          if (compressed && currentStatsSpan) {
            const originalSize = formatFileSize(result.originalSize || 0);
            const compressedSize = formatFileSize(result.compressedSize || 0);
            const ratio = result.compressionRatio || 0;

            currentStatsSpan.textContent = `Reduced from ${originalSize} to ${compressedSize} (${ratio}% savings)`;

            // Hide progress and show result
            currentProgressDiv?.classList.add("hidden");
            currentResultDiv?.classList.remove("hidden");

            // Enable submit button - compression complete
            setSubmitButtonState(false, true);
          }
        } else {
          throw new Error(result.error || "Compression failed");
        }
      } catch (error) {
        console.error(`${isBillOfSale ? 'Bill of Sale' : 'Main'} compression error:`, error);

        if (currentCompressionError) {
          currentCompressionError.textContent =
            error instanceof Error ? error.message : "Failed to compress image";
          currentCompressionError.classList.remove("hidden");
        }

        currentProgressDiv?.classList.add("hidden");

        // Keep the original file if compression fails
        if (isBillOfSale) {
          compressedBillFile = file;
        } else {
          compressedFile = file;
        }

        // Enable submit button - compression failed but we have original file
        setSubmitButtonState(false, true);
      }
    }

    // Main photo compression
    if (fileInput) {
      console.log('Main photo input found, attaching event listener');
      fileInput.addEventListener("change", async function (e) {
        const target = e.target;
        if (!target) return;
        await handleFileCompression(target, false);
      });
    } else {
      console.error('Main photo input not found! Looking for ID: main_photo');
    }

    // Bill of Sale photo compression
    if (billFileInput) {
      console.log('Bill of Sale photo input found, attaching event listener');
      billFileInput.addEventListener("change", async function (e) {
        const target = e.target;
        if (!target) return;
        await handleFileCompression(target, true);
      });
    } else {
      console.log('Bill of Sale photo input not found (this is normal for non-BBR forms)');
    }

    // Handle form submission with compressed images
    if (form) {
      form.addEventListener("submit", function (e) {
        console.log('Form submission - compressed files:', { main: compressedFile, bill: compressedBillFile });
        
        // If we have a compressed main file, replace the original file input
        if (compressedFile && fileInput) {
          const dataTransfer = new DataTransfer();
          dataTransfer.items.add(compressedFile);
          fileInput.files = dataTransfer.files;
          console.log('Replaced main file input with compressed file');
        }

        // If we have a compressed bill file, replace the original file input
        if (compressedBillFile && billFileInput) {
          const billDataTransfer = new DataTransfer();
          billDataTransfer.items.add(compressedBillFile);
          billFileInput.files = billDataTransfer.files;
          console.log('Replaced bill file input with compressed file');
        }

        // Form will submit normally with the compressed files
      });
    }

    // Initialize submit button state
    setSubmitButtonState(false, false);
  }

  // Wait for DOM to be ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeCompression);
  } else {
    // DOM is already ready
    initializeCompression();
  }
</script> 