---
import { PortableText } from "astro-portabletext";
import Button from "./Button.astro";

interface Props {
  content: {
    title: string;
    description: any[];
    features?: {
      text: string;
      icon?: {
        url?: string;
      };
    }[];
    actions?: {
      text: string;
      link: string;
      variant: 'primary' | 'secondary' | 'text';
    }[];
    media?: {
      type: 'image' | 'video';
      position: 'left' | 'right';
      width?: number;
      image?: {
        url?: string;
        alt?: string;
      };
      video?: string;
      animation?: boolean;
    };
    spacing?: 'none' | 'small' | 'medium' | 'large';
    background?: 'white' | 'primary-light' | 'light-gray';
    verticalAlignment?: 'top' | 'center' | 'bottom';
  };
}

const { content } = Astro.props;

const spacingClasses = {
  none: 'py-0',
  small: 'py-4',
  medium: 'py-8',
  large: 'py-16'
};

const verticalAlignmentClasses = {
  top: 'items-start',
  middle: 'items-center',
  bottom: 'items-end'
} as const;

// Get width classes based on media width
const getWidthClasses = (mediaWidth: number) => {
  if (mediaWidth >= 70) {
    return {
      media: 'lg:w-3/4', // 75%
      content: 'lg:w-1/4' // 25%
    };
  } else if (mediaWidth >= 60) {
    return {
      media: 'lg:w-2/3', // 66.66%
      content: 'lg:w-1/3' // 33.33%
    };
  } else if (mediaWidth >= 40) {
    return {
      media: 'lg:w-1/2', // 50%
      content: 'lg:w-1/2' // 50%
    };
  } else {
    return {
      media: 'lg:w-1/3', // 33.33%
      content: 'lg:w-2/3' // 66.66%
    };
  }
};

const widthClasses = getWidthClasses(content.media?.width || 50);

const backgroundClasses = {
  'white': 'bg-white',
  'primary-light': 'bg-primary-light',
  'light-gray': 'bg-gray-100'
} as const;

// Determine column order based on media position
const mediaOrder = content.media?.position === 'left' ? 'order-1 lg:order-1' : 'order-1 lg:order-2';
const contentOrder = content.media?.position === 'left' ? 'order-1 lg:order-2' : 'order-1 lg:order-1';
const backgroundClass = backgroundClasses[content.background || 'white'] || backgroundClasses.white;
---

<section class={`${backgroundClass} ${spacingClasses[content.spacing || 'medium']}` + " content"} transition:animate="slide">
  <div class="container mx-auto px-4">
    <div class={`flex flex-col lg:flex-row lg:gap-24 ${verticalAlignmentClasses[content.verticalAlignment || 'center']}`}>
      {/* Content Column */}
      <div class={`w-full ${contentOrder} ${widthClasses.content} animate-on-scroll fade-up`}>
        <h2 class="text-[50px] leading-[60px] tracking-[-0.03em] font-source-serif-4 font-bold mb-6 animate-on-scroll fade-up">
          {content.title}
         </h2>
        <div class="font-source-sans-pro font-normal text-[22px] leading-[39px] tracking-[0%] mt-6 text-primary animate-on-scroll fade-up">
          <PortableText value={content.description} />
        </div>
        
        {content.features && content.features.length > 0 && (
          <div class="space-y-4 mb-8 animate-on-scroll fade-up">
            {content.features.map((feature, index) => (
              <div class="flex items-center gap-4 animate-on-scroll fade-up" style={`animation-delay: ${index * 100}ms`}>
                {feature.icon?.url && (
                  <img 
                    src={feature.icon.url} 
                    alt="" 
                    class="w-6 h-6 object-contain"
                  />
                )}
                <span class="text-lg font-source-sans-pro">{feature.text}</span>
              </div>
            ))}
          </div>
        )}

        {content.actions && content.actions.length > 0 && (
          <div class="flex flex-wrap gap-4 mt-12 animate-on-scroll fade-up">
            {content.actions.map((action, index) => (
              <Button href={action.link} background={index === 0 ? 'primary' : 'white'}>
                {action.text}
              </Button>
            ))}
          </div>
        )}
      </div>

      {/* Media Column */}
      {content.media && (
        <div class={`w-full ${mediaOrder} ${widthClasses.media} mt-8 lg:mt-0 media-container ${content.media.animation ? 'animation-enabled' : ''} animate-on-scroll fade-in`}>
          {content.media.type === 'image' && content.media.image?.url && (
            <img 
              src={content.media.image.url} 
              alt={content.media.image.alt || ''} 
              class="object-cover rounded-lg"
            />
          )}
          {content.media.type === 'video' && content.media.video && (
            <video 
              src={content.media.video} 
              controls 
              class="w-full h-auto rounded-lg"
            />
          )}
        </div>
      )}
    </div>
  </div>
</section>

<style>
  .content ul {
    list-style-type: disc;
    margin-left: 20px;
  }
  /* Animation classes for viewport-based animations */
  .animate-on-scroll {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }

  .animate-on-scroll.animate {
    opacity: 1;
    transform: translateY(0);
  }

  .fade-up {
    transform: translateY(30px);
  }

  .fade-in {
    opacity: 0;
  }

  .fade-up.animate {
    transform: translateY(0);
  }

  .fade-in.animate {
    opacity: 1;
  }
</style>

